# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cepton_ros/SensorInformation.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SensorInformation(genpy.Message):
  _md5sum = "17a2d5b6ea6272b0e293aadb5010d209"
  _type = "cepton_ros/SensorInformation"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint64 handle
uint64 serial_number
string model_name
uint16 model
string firmware_version

float32 last_reported_temperature       
float32 last_reported_humidity          
float32 last_reported_age              

float32 measurement_period  

int64 ptp_ts  

uint8 gps_ts_year  
uint8 gps_ts_month  
uint8 gps_ts_day    
uint8 gps_ts_hour   
uint8 gps_ts_min    
uint8 gps_ts_sec    

uint8 return_count
uint8 segment_count  

bool is_mocked
bool is_pps_connected
bool is_nmea_connected
bool is_ptp_connected
bool is_calibrated
bool is_over_heated

int16 cepton_sdk_version
uint8[] data # `cepton_sdk::SensorInformation` bytes
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','handle','serial_number','model_name','model','firmware_version','last_reported_temperature','last_reported_humidity','last_reported_age','measurement_period','ptp_ts','gps_ts_year','gps_ts_month','gps_ts_day','gps_ts_hour','gps_ts_min','gps_ts_sec','return_count','segment_count','is_mocked','is_pps_connected','is_nmea_connected','is_ptp_connected','is_calibrated','is_over_heated','cepton_sdk_version','data']
  _slot_types = ['std_msgs/Header','uint64','uint64','string','uint16','string','float32','float32','float32','float32','int64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','bool','bool','bool','bool','bool','bool','int16','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,handle,serial_number,model_name,model,firmware_version,last_reported_temperature,last_reported_humidity,last_reported_age,measurement_period,ptp_ts,gps_ts_year,gps_ts_month,gps_ts_day,gps_ts_hour,gps_ts_min,gps_ts_sec,return_count,segment_count,is_mocked,is_pps_connected,is_nmea_connected,is_ptp_connected,is_calibrated,is_over_heated,cepton_sdk_version,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorInformation, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.handle is None:
        self.handle = 0
      if self.serial_number is None:
        self.serial_number = 0
      if self.model_name is None:
        self.model_name = ''
      if self.model is None:
        self.model = 0
      if self.firmware_version is None:
        self.firmware_version = ''
      if self.last_reported_temperature is None:
        self.last_reported_temperature = 0.
      if self.last_reported_humidity is None:
        self.last_reported_humidity = 0.
      if self.last_reported_age is None:
        self.last_reported_age = 0.
      if self.measurement_period is None:
        self.measurement_period = 0.
      if self.ptp_ts is None:
        self.ptp_ts = 0
      if self.gps_ts_year is None:
        self.gps_ts_year = 0
      if self.gps_ts_month is None:
        self.gps_ts_month = 0
      if self.gps_ts_day is None:
        self.gps_ts_day = 0
      if self.gps_ts_hour is None:
        self.gps_ts_hour = 0
      if self.gps_ts_min is None:
        self.gps_ts_min = 0
      if self.gps_ts_sec is None:
        self.gps_ts_sec = 0
      if self.return_count is None:
        self.return_count = 0
      if self.segment_count is None:
        self.segment_count = 0
      if self.is_mocked is None:
        self.is_mocked = False
      if self.is_pps_connected is None:
        self.is_pps_connected = False
      if self.is_nmea_connected is None:
        self.is_nmea_connected = False
      if self.is_ptp_connected is None:
        self.is_ptp_connected = False
      if self.is_calibrated is None:
        self.is_calibrated = False
      if self.is_over_heated is None:
        self.is_over_heated = False
      if self.cepton_sdk_version is None:
        self.cepton_sdk_version = 0
      if self.data is None:
        self.data = b''
    else:
      self.header = std_msgs.msg.Header()
      self.handle = 0
      self.serial_number = 0
      self.model_name = ''
      self.model = 0
      self.firmware_version = ''
      self.last_reported_temperature = 0.
      self.last_reported_humidity = 0.
      self.last_reported_age = 0.
      self.measurement_period = 0.
      self.ptp_ts = 0
      self.gps_ts_year = 0
      self.gps_ts_month = 0
      self.gps_ts_day = 0
      self.gps_ts_hour = 0
      self.gps_ts_min = 0
      self.gps_ts_sec = 0
      self.return_count = 0
      self.segment_count = 0
      self.is_mocked = False
      self.is_pps_connected = False
      self.is_nmea_connected = False
      self.is_ptp_connected = False
      self.is_calibrated = False
      self.is_over_heated = False
      self.cepton_sdk_version = 0
      self.data = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.handle, _x.serial_number))
      _x = self.model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.model))
      _x = self.firmware_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4fq14Bh().pack(_x.last_reported_temperature, _x.last_reported_humidity, _x.last_reported_age, _x.measurement_period, _x.ptp_ts, _x.gps_ts_year, _x.gps_ts_month, _x.gps_ts_day, _x.gps_ts_hour, _x.gps_ts_min, _x.gps_ts_sec, _x.return_count, _x.segment_count, _x.is_mocked, _x.is_pps_connected, _x.is_nmea_connected, _x.is_ptp_connected, _x.is_calibrated, _x.is_over_heated, _x.cepton_sdk_version))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.handle, _x.serial_number,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_name = str[start:end].decode('utf-8')
      else:
        self.model_name = str[start:end]
      start = end
      end += 2
      (self.model,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmware_version = str[start:end].decode('utf-8')
      else:
        self.firmware_version = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.last_reported_temperature, _x.last_reported_humidity, _x.last_reported_age, _x.measurement_period, _x.ptp_ts, _x.gps_ts_year, _x.gps_ts_month, _x.gps_ts_day, _x.gps_ts_hour, _x.gps_ts_min, _x.gps_ts_sec, _x.return_count, _x.segment_count, _x.is_mocked, _x.is_pps_connected, _x.is_nmea_connected, _x.is_ptp_connected, _x.is_calibrated, _x.is_over_heated, _x.cepton_sdk_version,) = _get_struct_4fq14Bh().unpack(str[start:end])
      self.is_mocked = bool(self.is_mocked)
      self.is_pps_connected = bool(self.is_pps_connected)
      self.is_nmea_connected = bool(self.is_nmea_connected)
      self.is_ptp_connected = bool(self.is_ptp_connected)
      self.is_calibrated = bool(self.is_calibrated)
      self.is_over_heated = bool(self.is_over_heated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Q().pack(_x.handle, _x.serial_number))
      _x = self.model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.model))
      _x = self.firmware_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4fq14Bh().pack(_x.last_reported_temperature, _x.last_reported_humidity, _x.last_reported_age, _x.measurement_period, _x.ptp_ts, _x.gps_ts_year, _x.gps_ts_month, _x.gps_ts_day, _x.gps_ts_hour, _x.gps_ts_min, _x.gps_ts_sec, _x.return_count, _x.segment_count, _x.is_mocked, _x.is_pps_connected, _x.is_nmea_connected, _x.is_ptp_connected, _x.is_calibrated, _x.is_over_heated, _x.cepton_sdk_version))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.handle, _x.serial_number,) = _get_struct_2Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_name = str[start:end].decode('utf-8')
      else:
        self.model_name = str[start:end]
      start = end
      end += 2
      (self.model,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmware_version = str[start:end].decode('utf-8')
      else:
        self.firmware_version = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.last_reported_temperature, _x.last_reported_humidity, _x.last_reported_age, _x.measurement_period, _x.ptp_ts, _x.gps_ts_year, _x.gps_ts_month, _x.gps_ts_day, _x.gps_ts_hour, _x.gps_ts_min, _x.gps_ts_sec, _x.return_count, _x.segment_count, _x.is_mocked, _x.is_pps_connected, _x.is_nmea_connected, _x.is_ptp_connected, _x.is_calibrated, _x.is_over_heated, _x.cepton_sdk_version,) = _get_struct_4fq14Bh().unpack(str[start:end])
      self.is_mocked = bool(self.is_mocked)
      self.is_pps_connected = bool(self.is_pps_connected)
      self.is_nmea_connected = bool(self.is_nmea_connected)
      self.is_ptp_connected = bool(self.is_ptp_connected)
      self.is_calibrated = bool(self.is_calibrated)
      self.is_over_heated = bool(self.is_over_heated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_4fq14Bh = None
def _get_struct_4fq14Bh():
    global _struct_4fq14Bh
    if _struct_4fq14Bh is None:
        _struct_4fq14Bh = struct.Struct("<4fq14Bh")
    return _struct_4fq14Bh
