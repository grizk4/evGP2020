// Generated by gencpp from file cepton_ros/SensorInformation.msg
// DO NOT EDIT!


#ifndef CEPTON_ROS_MESSAGE_SENSORINFORMATION_H
#define CEPTON_ROS_MESSAGE_SENSORINFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cepton_ros
{
template <class ContainerAllocator>
struct SensorInformation_
{
  typedef SensorInformation_<ContainerAllocator> Type;

  SensorInformation_()
    : header()
    , handle(0)
    , serial_number(0)
    , model_name()
    , model(0)
    , firmware_version()
    , last_reported_temperature(0.0)
    , last_reported_humidity(0.0)
    , last_reported_age(0.0)
    , measurement_period(0.0)
    , ptp_ts(0)
    , gps_ts_year(0)
    , gps_ts_month(0)
    , gps_ts_day(0)
    , gps_ts_hour(0)
    , gps_ts_min(0)
    , gps_ts_sec(0)
    , return_count(0)
    , segment_count(0)
    , is_mocked(false)
    , is_pps_connected(false)
    , is_nmea_connected(false)
    , is_ptp_connected(false)
    , is_calibrated(false)
    , is_over_heated(false)
    , cepton_sdk_version(0)
    , data()  {
    }
  SensorInformation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , handle(0)
    , serial_number(0)
    , model_name(_alloc)
    , model(0)
    , firmware_version(_alloc)
    , last_reported_temperature(0.0)
    , last_reported_humidity(0.0)
    , last_reported_age(0.0)
    , measurement_period(0.0)
    , ptp_ts(0)
    , gps_ts_year(0)
    , gps_ts_month(0)
    , gps_ts_day(0)
    , gps_ts_hour(0)
    , gps_ts_min(0)
    , gps_ts_sec(0)
    , return_count(0)
    , segment_count(0)
    , is_mocked(false)
    , is_pps_connected(false)
    , is_nmea_connected(false)
    , is_ptp_connected(false)
    , is_calibrated(false)
    , is_over_heated(false)
    , cepton_sdk_version(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _handle_type;
  _handle_type handle;

   typedef uint64_t _serial_number_type;
  _serial_number_type serial_number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef uint16_t _model_type;
  _model_type model;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _firmware_version_type;
  _firmware_version_type firmware_version;

   typedef float _last_reported_temperature_type;
  _last_reported_temperature_type last_reported_temperature;

   typedef float _last_reported_humidity_type;
  _last_reported_humidity_type last_reported_humidity;

   typedef float _last_reported_age_type;
  _last_reported_age_type last_reported_age;

   typedef float _measurement_period_type;
  _measurement_period_type measurement_period;

   typedef int64_t _ptp_ts_type;
  _ptp_ts_type ptp_ts;

   typedef uint8_t _gps_ts_year_type;
  _gps_ts_year_type gps_ts_year;

   typedef uint8_t _gps_ts_month_type;
  _gps_ts_month_type gps_ts_month;

   typedef uint8_t _gps_ts_day_type;
  _gps_ts_day_type gps_ts_day;

   typedef uint8_t _gps_ts_hour_type;
  _gps_ts_hour_type gps_ts_hour;

   typedef uint8_t _gps_ts_min_type;
  _gps_ts_min_type gps_ts_min;

   typedef uint8_t _gps_ts_sec_type;
  _gps_ts_sec_type gps_ts_sec;

   typedef uint8_t _return_count_type;
  _return_count_type return_count;

   typedef uint8_t _segment_count_type;
  _segment_count_type segment_count;

   typedef uint8_t _is_mocked_type;
  _is_mocked_type is_mocked;

   typedef uint8_t _is_pps_connected_type;
  _is_pps_connected_type is_pps_connected;

   typedef uint8_t _is_nmea_connected_type;
  _is_nmea_connected_type is_nmea_connected;

   typedef uint8_t _is_ptp_connected_type;
  _is_ptp_connected_type is_ptp_connected;

   typedef uint8_t _is_calibrated_type;
  _is_calibrated_type is_calibrated;

   typedef uint8_t _is_over_heated_type;
  _is_over_heated_type is_over_heated;

   typedef int16_t _cepton_sdk_version_type;
  _cepton_sdk_version_type cepton_sdk_version;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::cepton_ros::SensorInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cepton_ros::SensorInformation_<ContainerAllocator> const> ConstPtr;

}; // struct SensorInformation_

typedef ::cepton_ros::SensorInformation_<std::allocator<void> > SensorInformation;

typedef boost::shared_ptr< ::cepton_ros::SensorInformation > SensorInformationPtr;
typedef boost::shared_ptr< ::cepton_ros::SensorInformation const> SensorInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cepton_ros::SensorInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cepton_ros::SensorInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cepton_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'cepton_ros': ['/home/nvidia/catkin_ws/src/cepton_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cepton_ros::SensorInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cepton_ros::SensorInformation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cepton_ros::SensorInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cepton_ros::SensorInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cepton_ros::SensorInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cepton_ros::SensorInformation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cepton_ros::SensorInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17a2d5b6ea6272b0e293aadb5010d209";
  }

  static const char* value(const ::cepton_ros::SensorInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17a2d5b6ea6272b0ULL;
  static const uint64_t static_value2 = 0xe293aadb5010d209ULL;
};

template<class ContainerAllocator>
struct DataType< ::cepton_ros::SensorInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cepton_ros/SensorInformation";
  }

  static const char* value(const ::cepton_ros::SensorInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cepton_ros::SensorInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint64 handle\n\
uint64 serial_number\n\
string model_name\n\
uint16 model\n\
string firmware_version\n\
\n\
float32 last_reported_temperature       \n\
float32 last_reported_humidity          \n\
float32 last_reported_age              \n\
\n\
float32 measurement_period  \n\
\n\
int64 ptp_ts  \n\
\n\
uint8 gps_ts_year  \n\
uint8 gps_ts_month  \n\
uint8 gps_ts_day    \n\
uint8 gps_ts_hour   \n\
uint8 gps_ts_min    \n\
uint8 gps_ts_sec    \n\
\n\
uint8 return_count\n\
uint8 segment_count  \n\
\n\
bool is_mocked\n\
bool is_pps_connected\n\
bool is_nmea_connected\n\
bool is_ptp_connected\n\
bool is_calibrated\n\
bool is_over_heated\n\
\n\
int16 cepton_sdk_version\n\
uint8[] data # `cepton_sdk::SensorInformation` bytes\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::cepton_ros::SensorInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cepton_ros::SensorInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.handle);
      stream.next(m.serial_number);
      stream.next(m.model_name);
      stream.next(m.model);
      stream.next(m.firmware_version);
      stream.next(m.last_reported_temperature);
      stream.next(m.last_reported_humidity);
      stream.next(m.last_reported_age);
      stream.next(m.measurement_period);
      stream.next(m.ptp_ts);
      stream.next(m.gps_ts_year);
      stream.next(m.gps_ts_month);
      stream.next(m.gps_ts_day);
      stream.next(m.gps_ts_hour);
      stream.next(m.gps_ts_min);
      stream.next(m.gps_ts_sec);
      stream.next(m.return_count);
      stream.next(m.segment_count);
      stream.next(m.is_mocked);
      stream.next(m.is_pps_connected);
      stream.next(m.is_nmea_connected);
      stream.next(m.is_ptp_connected);
      stream.next(m.is_calibrated);
      stream.next(m.is_over_heated);
      stream.next(m.cepton_sdk_version);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cepton_ros::SensorInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cepton_ros::SensorInformation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "handle: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.handle);
    s << indent << "serial_number: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.serial_number);
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "model: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.model);
    s << indent << "firmware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.firmware_version);
    s << indent << "last_reported_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.last_reported_temperature);
    s << indent << "last_reported_humidity: ";
    Printer<float>::stream(s, indent + "  ", v.last_reported_humidity);
    s << indent << "last_reported_age: ";
    Printer<float>::stream(s, indent + "  ", v.last_reported_age);
    s << indent << "measurement_period: ";
    Printer<float>::stream(s, indent + "  ", v.measurement_period);
    s << indent << "ptp_ts: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ptp_ts);
    s << indent << "gps_ts_year: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_ts_year);
    s << indent << "gps_ts_month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_ts_month);
    s << indent << "gps_ts_day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_ts_day);
    s << indent << "gps_ts_hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_ts_hour);
    s << indent << "gps_ts_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_ts_min);
    s << indent << "gps_ts_sec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_ts_sec);
    s << indent << "return_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_count);
    s << indent << "segment_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.segment_count);
    s << indent << "is_mocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_mocked);
    s << indent << "is_pps_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_pps_connected);
    s << indent << "is_nmea_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_nmea_connected);
    s << indent << "is_ptp_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ptp_connected);
    s << indent << "is_calibrated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_calibrated);
    s << indent << "is_over_heated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_over_heated);
    s << indent << "cepton_sdk_version: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cepton_sdk_version);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CEPTON_ROS_MESSAGE_SENSORINFORMATION_H
